/**
 * Helper type to define an object with any value
 */
export type AnyObject = {
  /**
   * Allow any key
   */
  [key: string]: any;
};

/**
 * Represent a model that will be passed to a context provider
 */
export interface Model {
  /**
   * The model's unique id. Could be a UUID
   */
  id: string;
  /**
   * Define the type of the model. A model can be a data-model, a page structure, etc.
   * This value will be used by the context providers to filter models they can handle.
   * @example 'hapify-data-model'
   * @example 'my-page-structure'
   */
  type: string;
  /**
   * Contains the fields of a model
   * The structure and content of this object is validated by the context provider
   */
  structure: AnyObject;
}

/**
 * Function that computes the output path from the model
 */
export type TemplatePathGenerator = (model: Model) => string | Promise<string>;

/**
 * Function to filter models to process (true => process model)
 */
export type ModelFilterFunction = (model: Model) => boolean;

/**
 * Template definition object
 */
export interface Template {
  /**
   * Input path of the template
   */
  input: string;
  /**
   * Output path value or generator
   */
  output: string | TemplatePathGenerator;
  /**
   * Engine name or path that can process this template
   */
  engine: string;
  /**
   * Define a function to filter models. True => keep model.
   * @default () => true
   */
  shouldHandleModel?: ModelFilterFunction;
  /**
   * Define a list of models types that the template can handle
   * This is applied before the shouldHandleModel callback.
   * @default []
   * @example ['hapify-data-model']
   */
  modelsTypes: string[];
}

/**
 * Represent the object that is generated by a context provider and will be passed to an engine
 */
export interface Context {
  /**
   * List of input models that were used to generate this context
   */
  sourceModels: Model[];
  /**
   * Allow any object
   */
  artifact: AnyObject;
}

/**
 * Function to filter contents to process (true => process content)
 */
export type ContentFilterFunction = (content: Content) => boolean;

/**
 * Represent an object that is generated by an engine and will be passed to a saver
 */
export interface Content {
  /**
   * Context passed to the engine that generate this content
   */
  sourceContext: Context;
  /**
   * Template passed to the engine that generate this content
   */
  sourceTemplate: Template;
  /**
   * Output path of the content
   */
  path: string;
  /**
   * Content of the file to save
   */
  content: string;
}

/**
 * Function that transform an artifact generated by a provider
 * @var T artifact's type generated by the provider
 */
export type ProviderHook<T> = (artifact: T) => T | Promise<T>;

/**
 * Represents information to load an configure a provider
 * @var T artifact's type generated by the provider
 * @var O options used to initialize the provider
 */
export interface ProviderConfig<T, O = AnyObject> {
  /**
   * Package name or path to provider
   */
  provider: string;
  /**
   * Options to initialize a provider
   * Depends on each provider
   * @default {}
   */
  options?: O;
  /**
   * List of callbacks to be applied on artifacts
   * @default []
   */
  hooks?: ProviderHook<T>[];
}

/**
 * Groups different ways to define a provider
 * @var T artifact's type generated by the provider
 * @var O options used to initialize the provider
 */
export type ProviderDefinition<T, O = AnyObject> =
  | string
  | ProviderConfig<T, O>;

/**
 * Options that all saver providers must extend
 */
export interface SaverProviderOptions extends AnyObject {
  /**
   * Denotes if the output should be saved if no content is generated.
   * @default false
   */
  saveIfEmpty?: boolean | ContentFilterFunction;
}

/**
 * Definition for templates providers
 */
export type TemplateProviderDefinition = ProviderDefinition<Template>;

/**
 * Definition for models providers
 */
export type ModelProviderDefinition = ProviderDefinition<Model>;

/**
 * Definition for contexts providers
 */
export type ContextProviderDefinition = ProviderDefinition<Context>;

/**
 * Definition for engines providers
 */
export type EngineProviderDefinition = ProviderDefinition<Content>;

/**
 * Definition for savers providers
 */
export type SaverProviderDefinition = ProviderDefinition<string>;

/**
 * Object that carry on all configuration necessary for generation
 */
export interface Config {
  /**
   * Definition of templates providers to use
   * @default ['@hapify/local-storage']
   */
  templatesProviders: TemplateProviderDefinition[];

  /**
   * Definition of models providers to use
   * @default ['@hapify/local-storage']
   */
  modelsProviders: ModelProviderDefinition[];

  /**
   * Definition of context providers to use
   * @default ['@hapify/data-model-context']
   */
  contextProviders: ContextProviderDefinition[];

  /**
   * Definition of engines to use
   * @default ['@hapify/hpf-engine', '@hapify/javascript-engine', '@hapify/ejs-engine']
   */
  engineProviders: EngineProviderDefinition[];

  /**
   * Definition of engines to use
   * @default ['@hapify/local-storage']
   */
  saverProviders: SaverProviderDefinition[];

  /**
   * Allow extensibility
   */
  [key: string]: any;
}

/**
 * Instance that can return an Hapify configuration
 */
export interface ConfigProvider {
  /**
   * Fetch and returns the config.
   */
  get(): Config | Promise<Config>;
}
